<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue打包过滤console和debug</title>
    <url>/2020/08/20/Vue%E6%89%93%E5%8C%85%E8%BF%87%E6%BB%A4console%E5%92%8Cdebug/</url>
    <content><![CDATA[<p>平常开发时候我们经常会通过打印console.log和debug来断点测试，排查问题，查看数据格式等，但是有时候会忽略掉，以至于打包上线后，可能还有存留的debug和console，打开控制台挺不美观、干净，但是如果全部删掉，后面改bug时候可能又要添加。所以只需要进行webpack配置，就可以避免。</p>
<a id="more"></a>

<h2 id="webpack-config-js文件"><a href="#webpack-config-js文件" class="headerlink" title="webpack.config.js文件"></a>webpack.config.js文件</h2><pre><code class="hljs yaml"><span class="hljs-string">new</span> <span class="hljs-string">webpack.optimize.UglifyJsPlugin(&#123;</span>
  <span class="hljs-string">compress:&#123;</span>
    <span class="hljs-attr">warnings:</span> <span class="hljs-literal">false</span><span class="hljs-string">,</span>
    <span class="hljs-attr">drop_debugger:</span> <span class="hljs-literal">true</span><span class="hljs-string">,</span>
    <span class="hljs-attr">drop_console:</span> <span class="hljs-literal">true</span>
  <span class="hljs-string">&#125;</span>
<span class="hljs-string">&#125;)</span>

<span class="hljs-string">配置以下即可</span>
    <span class="hljs-attr">drop_debugger:</span> <span class="hljs-literal">true</span><span class="hljs-string">,</span>
    <span class="hljs-attr">drop_console:</span> <span class="hljs-literal">true</span></code></pre>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>js计算精度丢失,公共方法封装</title>
    <url>/2020/08/18/js%E8%AE%A1%E7%AE%97%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1-%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>最近做后台管理时候，有大量的输入计算，但是js本身计算会存在精度丢失，于是封装了一个公用的方法，全局使用</p>
<a id="more"></a>

<h1 id="新建calculation-js文件"><a href="#新建calculation-js文件" class="headerlink" title="新建calculation.js文件"></a>新建calculation.js文件</h1><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> countDecimals = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>&#123;    
    <span class="hljs-keyword">var</span> len = <span class="hljs-number">0</span>;    
    <span class="hljs-keyword">try</span> &#123;        
        num = <span class="hljs-built_in">Number</span>(num);        
        <span class="hljs-keyword">var</span> str = num.toString().toUpperCase();        
        <span class="hljs-keyword">if</span> (str.split(<span class="hljs-string">&#x27;E&#x27;</span>).length === <span class="hljs-number">2</span>) &#123;             
            <span class="hljs-keyword">var</span> isDecimal = <span class="hljs-literal">false</span>;            
            <span class="hljs-keyword">if</span> (str.split(<span class="hljs-string">&#x27;.&#x27;</span>).length === <span class="hljs-number">2</span>) &#123;                
                str = str.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>];                
                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">parseInt</span>(str.split(<span class="hljs-string">&#x27;E&#x27;</span>)[<span class="hljs-number">0</span>]) !== <span class="hljs-number">0</span>) &#123;                    
                    isDecimal = <span class="hljs-literal">true</span>;                
                &#125;            
            &#125;            
            <span class="hljs-keyword">let</span> x = str.split(<span class="hljs-string">&#x27;E&#x27;</span>);            
            <span class="hljs-keyword">if</span> (isDecimal) &#123;                
                len = x[<span class="hljs-number">0</span>].length;            
            &#125;            
            len -= <span class="hljs-built_in">parseInt</span>(x[<span class="hljs-number">1</span>]);        
        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str.split(<span class="hljs-string">&#x27;.&#x27;</span>).length === <span class="hljs-number">2</span>) &#123;           
            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">parseInt</span>(str.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]) !== <span class="hljs-number">0</span>) &#123;                
                len = str.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>].length;            
            &#125;        
        &#125;    
    &#125; <span class="hljs-keyword">catch</span> (e) &#123;        
        <span class="hljs-keyword">throw</span> e;    
    &#125; <span class="hljs-keyword">finally</span> &#123;        
        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(len) || len &lt; <span class="hljs-number">0</span>) &#123;            
            len = <span class="hljs-number">0</span>;        
        &#125;        
        <span class="hljs-keyword">return</span> len;    
    &#125;
&#125;; 
<span class="hljs-keyword">var</span> convertToInt = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>&#123;    
    num = <span class="hljs-built_in">Number</span>(num);    
    <span class="hljs-keyword">var</span> newNum = num;    
    <span class="hljs-keyword">var</span> times = countDecimals(num);    
    <span class="hljs-keyword">var</span> temp_num = num.toString().toUpperCase();    
    <span class="hljs-keyword">if</span> (temp_num.split(<span class="hljs-string">&#x27;E&#x27;</span>).length === <span class="hljs-number">2</span>) &#123;        
        newNum = <span class="hljs-built_in">Math</span>.round(num * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, times));    
    &#125; <span class="hljs-keyword">else</span> &#123;        
        newNum = <span class="hljs-built_in">Number</span>(temp_num.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));    
    &#125;    
    <span class="hljs-keyword">return</span> newNum;
&#125;; 
<span class="hljs-keyword">var</span> getCorrectResult = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">type, num1, num2, result</span>) </span>&#123;    
    <span class="hljs-keyword">var</span> temp_result = <span class="hljs-number">0</span>;    
    <span class="hljs-keyword">switch</span> (type) &#123;        
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:            
            temp_result = num1 + num2;            
            <span class="hljs-keyword">break</span>;        
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sub&quot;</span>:            
            temp_result = num1 - num2;            
            <span class="hljs-keyword">break</span>;        
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;div&quot;</span>:            
            temp_result = num1 / num2;            
            <span class="hljs-keyword">break</span>;        
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;mul&quot;</span>:            
            temp_result = num1 * num2;            
            <span class="hljs-keyword">break</span>;    
    &#125;    
    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.abs(result - temp_result) &gt; <span class="hljs-number">1</span>) &#123;        
        <span class="hljs-keyword">return</span> temp_result;    
    &#125;    
    <span class="hljs-keyword">return</span> result;
&#125;;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    
    <span class="hljs-comment">//加法    </span>
    <span class="hljs-function"><span class="hljs-title">accAdd</span>(<span class="hljs-params">num1, num2</span>)</span> &#123;        
        num1 = <span class="hljs-built_in">Number</span>(num1);        
        num2 = <span class="hljs-built_in">Number</span>(num2);        
        <span class="hljs-keyword">var</span> dec1, dec2, times;        
        <span class="hljs-keyword">try</span> &#123; dec1 = countDecimals(num1) + <span class="hljs-number">1</span>; &#125; <span class="hljs-keyword">catch</span> (e) &#123; dec1 = <span class="hljs-number">0</span>; &#125;        
        <span class="hljs-keyword">try</span> &#123; dec2 = countDecimals(num2) + <span class="hljs-number">1</span>; &#125; <span class="hljs-keyword">catch</span> (e) &#123; dec2 = <span class="hljs-number">0</span>; &#125;        
        times = <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, <span class="hljs-built_in">Math</span>.max(dec1, dec2));        
        <span class="hljs-keyword">var</span> result = (<span class="hljs-built_in">this</span>.accMul(num1, times) + <span class="hljs-built_in">this</span>.accMul(num2, times)) / times;        
        <span class="hljs-keyword">return</span> getCorrectResult(<span class="hljs-string">&quot;add&quot;</span>, num1, num2, result);    
    &#125;,    
    <span class="hljs-comment">//减法    </span>
    <span class="hljs-function"><span class="hljs-title">accSub</span>(<span class="hljs-params">num1, num2</span>)</span> &#123;        
        num1 = <span class="hljs-built_in">Number</span>(num1);        
        num2 = <span class="hljs-built_in">Number</span>(num2);        
        <span class="hljs-keyword">var</span> dec1, dec2, times;        
        <span class="hljs-keyword">try</span> &#123; dec1 = countDecimals(num1) + <span class="hljs-number">1</span>; &#125; <span class="hljs-keyword">catch</span> (e) &#123; dec1 = <span class="hljs-number">0</span>; &#125;        
        <span class="hljs-keyword">try</span> &#123; dec2 = countDecimals(num2) + <span class="hljs-number">1</span>; &#125; <span class="hljs-keyword">catch</span> (e) &#123; dec2 = <span class="hljs-number">0</span>; &#125;        
        times = <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, <span class="hljs-built_in">Math</span>.max(dec1, dec2));        
        <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Number</span>((<span class="hljs-built_in">this</span>.accMul(num1, times) - <span class="hljs-built_in">this</span>.accMul(num2, times)) / times);        
        <span class="hljs-keyword">return</span> getCorrectResult(<span class="hljs-string">&quot;sub&quot;</span>, num1, num2, result);    
    &#125;,    
    <span class="hljs-comment">//除法    </span>
    <span class="hljs-function"><span class="hljs-title">accDiv</span>(<span class="hljs-params">num1, num2</span>)</span> &#123;        
        num1 = <span class="hljs-built_in">Number</span>(num1);        
        num2 = <span class="hljs-built_in">Number</span>(num2);        
        <span class="hljs-keyword">var</span> t1 = <span class="hljs-number">0</span>,            
            t2 = <span class="hljs-number">0</span>,            
            dec1, dec2;        
        <span class="hljs-keyword">try</span> &#123; t1 = countDecimals(num1); &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;        
        <span class="hljs-keyword">try</span> &#123; t2 = countDecimals(num2); &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;        
        dec1 = convertToInt(num1);        
        dec2 = convertToInt(num2);        
        <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">this</span>.accMul((dec1 / dec2), <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, t2 - t1));        
        <span class="hljs-keyword">return</span> getCorrectResult(<span class="hljs-string">&quot;div&quot;</span>, num1, num2, result);    
    &#125;,    
    <span class="hljs-comment">//乘法    </span>
    <span class="hljs-function"><span class="hljs-title">accMul</span>(<span class="hljs-params">num1, num2</span>)</span> &#123;        
        num1 = <span class="hljs-built_in">Number</span>(num1);        
        num2 = <span class="hljs-built_in">Number</span>(num2);        
        <span class="hljs-keyword">var</span> times = <span class="hljs-number">0</span>,            
            s1 = num1.toString(),            
            s2 = num2.toString();        
        <span class="hljs-keyword">try</span> &#123; times += countDecimals(s1); &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;        
        <span class="hljs-keyword">try</span> &#123; times += countDecimals(s2); &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;        
        <span class="hljs-keyword">var</span> result = convertToInt(s1) * convertToInt(s2) / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, times);        
        <span class="hljs-keyword">return</span> getCorrectResult(<span class="hljs-string">&quot;mul&quot;</span>, num1, num2, result);    
    &#125;
&#125;</code></pre>
<h1 id="在main-js里面引入，并且全局注册"><a href="#在main-js里面引入，并且全局注册" class="headerlink" title="在main.js里面引入，并且全局注册"></a>在main.js里面引入，并且全局注册</h1><pre><code class="hljs clean"><span class="hljs-keyword">import</span> cal <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/calculation&#x27;</span>;
Vue.prototype.cal = cal</code></pre>
<h1 id="最后直接在需要的地方进行使用就可以啦…"><a href="#最后直接在需要的地方进行使用就可以啦…" class="headerlink" title="最后直接在需要的地方进行使用就可以啦…"></a>最后直接在需要的地方进行使用就可以啦…</h1><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.result = <span class="hljs-keyword">this</span>.cal.accMul(<span class="hljs-keyword">this</span>.num, <span class="hljs-number">0.6</span>);</code></pre>]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>react配置config-overrides.js文件，按需引入Antd以及less</title>
    <url>/2020/09/18/react%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<p>最近在熟悉react，通过react create app创建项目后，并不像以前一样可以进行webpack的配置，官方文档有写到可以npm run eject暴露所有配置，会发现根目录下生成了 config 目录，但是此操作是不可逆的。<br>如果需要在项目中配置一些webpack配置，需要在根目录下新建一个名称为config-overrides.js的文件</p>
<a id="more"></a>

<h2 id="下载antd-包"><a href="#下载antd-包" class="headerlink" title="下载antd 包"></a>下载antd 包</h2><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> antd</code></pre>
<h2 id="安装customize-cra，引入react-app-rewired插件"><a href="#安装customize-cra，引入react-app-rewired插件" class="headerlink" title="安装customize-cra，引入react-app-rewired插件"></a>安装customize-cra，引入react-app-rewired插件</h2><h3 id="react-app-rewired的作用就是在不eject的情况下-覆盖create-react-app的配置"><a href="#react-app-rewired的作用就是在不eject的情况下-覆盖create-react-app的配置" class="headerlink" title="react-app-rewired的作用就是在不eject的情况下,覆盖create-react-app的配置"></a>react-app-rewired的作用就是在不eject的情况下,覆盖create-react-app的配置</h3><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install react-app-rewired customize-cra babel-plugin-<span class="hljs-keyword">import</span></code></pre>
<h2 id="自定义less-loader-改变antd默认样式"><a href="#自定义less-loader-改变antd默认样式" class="headerlink" title="自定义less-loader,改变antd默认样式"></a>自定义less-loader,改变antd默认样式</h2><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> <span class="hljs-keyword">less</span> <span class="hljs-keyword">less</span>-loader</code></pre>
<h2 id="在根目录下面新建config-overrides-js，并修改相关配置"><a href="#在根目录下面新建config-overrides-js，并修改相关配置" class="headerlink" title="在根目录下面新建config-overrides.js，并修改相关配置"></a>在根目录下面新建config-overrides.js，并修改相关配置</h2><pre><code class="hljs lua">const &#123; override, fixBabelImports, addLessLoader, addWebpackAlias &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;customize-cra&quot;</span>);const <span class="hljs-built_in">path</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);
// 打包配置
const addCustomize = () =&gt; (<span class="hljs-built_in">config</span>) =&gt; &#123;  
  // 修改<span class="hljs-built_in">path</span>目录  
  const <span class="hljs-built_in">path</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);  
  const paths = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;react-scripts/config/paths&#x27;</span>);  
  paths.appBuild = <span class="hljs-built_in">path</span>.join(<span class="hljs-built_in">path</span>.dirname(paths.appBuild), <span class="hljs-string">&#x27;dist&#x27;</span>);  
  <span class="hljs-built_in">config</span>.<span class="hljs-built_in">output</span>.<span class="hljs-built_in">path</span> = <span class="hljs-built_in">path</span>.join(<span class="hljs-built_in">path</span>.dirname(<span class="hljs-built_in">config</span>.<span class="hljs-built_in">output</span>.<span class="hljs-built_in">path</span>), <span class="hljs-string">&#x27;dist&#x27;</span>); 

  <span class="hljs-keyword">return</span> <span class="hljs-built_in">config</span>;
&#125;;

<span class="hljs-built_in">module</span>.exports = override(
  // 针对antd 实现按需打包：根据import来打包 (使用babel-plugin-import)  
  fixBabelImports(<span class="hljs-string">&quot;import&quot;</span>, &#123;    
    libraryName: <span class="hljs-string">&quot;antd&quot;</span>,    
    libraryDirectory: <span class="hljs-string">&quot;es&quot;</span>,    
    style: <span class="hljs-literal">true</span>, //自动打包相关的样式 默认为 style:<span class="hljs-string">&#x27;css&#x27;</span>  
  &#125;),
  // 使用less-loader对源码重的less的变量进行重新制定，设置antd自定义主题  
  addLessLoader(&#123;  
    javascriptEnabled: <span class="hljs-literal">true</span>,    
    modifyVars: &#123; <span class="hljs-string">&quot;@primary-color&quot;</span>: <span class="hljs-string">&quot;#1DA57A&quot;</span> &#125;,  
  &#125;),
  //增加路径别名的处理 
  addWebpackAlias(&#123;  
    <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-built_in">path</span>.resolve(<span class="hljs-string">&#x27;./src&#x27;</span>)  
  &#125;), 
  addCustomize());</code></pre>
<h2 id="修改package-json-的配置文件"><a href="#修改package-json-的配置文件" class="headerlink" title="修改package.json 的配置文件"></a>修改package.json 的配置文件</h2><pre><code class="hljs 1c"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;
    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;react-app-rewired start&quot;</span>,
    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;react-app-rewired build&quot;</span>,
    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;react--app-rewired test&quot;</span>,
    <span class="hljs-string">&quot;eject&quot;</span>: <span class="hljs-string">&quot;react-scripts eject&quot;</span>
  &#125;,</code></pre>
<h2 id="最后，在app-js引入需要的组件即可"><a href="#最后，在app-js引入需要的组件即可" class="headerlink" title="最后，在app.js引入需要的组件即可"></a>最后，在app.js引入需要的组件即可</h2><pre><code class="hljs gams">import &#123; Button, <span class="hljs-keyword">Table</span> &#125; from <span class="hljs-comment">&quot;antd&quot;</span>;</code></pre>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>redux持久化插件-解决redux数据刷新页面数据丢失问题</title>
    <url>/2020/10/21/redux%E6%8C%81%E4%B9%85%E5%8C%96%E6%8F%92%E4%BB%B6-%E8%A7%A3%E5%86%B3redux%E6%95%B0%E6%8D%AE%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p>在使用redux的时候，对数据进行全局的状态管理，会发现和vuex一样会出现刷新之后数据丢失的问题，使用redux-persist插件进行持久化数据存储 。<br>通常我们会使用sessionStorage或者localStorage来进行数据存储，但既然我们使用了redux来管理和存储全局数据，此时再使用sessionStorage或者localStorage存储，感觉会本末倒置，而且还增加了工作量。<br>这个时候 redux-persist，满足你的需求，它结合redux将store中的数据缓存到浏览器的sessionStorage或者localStorage中。</p>
</blockquote>
<h1 id="redux-persist持久化插件"><a href="#redux-persist持久化插件" class="headerlink" title="redux-persist持久化插件"></a>redux-persist持久化插件</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><pre><code class="hljs dockerfile">yarn <span class="hljs-keyword">add</span><span class="bash"> redux-persist --save</span></code></pre>
<h2 id="2-在store-js里面引入，存储到storageSession"><a href="#2-在store-js里面引入，存储到storageSession" class="headerlink" title="2.在store.js里面引入，存储到storageSession"></a>2.在store.js里面引入，存储到storageSession</h2><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>
<span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-thunk&#x27;</span>
<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducer&#x27;</span>
<span class="hljs-keyword">import</span> &#123;persistStore, persistReducer&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-persist&#x27;</span>;
<span class="hljs-comment">//  存储机制，当前使用sessionStorage, 可换成localStorage</span>
<span class="hljs-keyword">import</span> storageSession <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-persist/lib/storage/session&#x27;</span>

<span class="hljs-keyword">const</span> persistConfig = &#123;  
  key: <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">// 必须有的  </span>
  storage:storageSession, <span class="hljs-comment">// 缓存机制  </span>
  <span class="hljs-comment">// blacklist: [&#x27;loginStatus&#x27;] reducer 里不持久化的数据,除此外均为持久化数据  </span>
  whitelist: [<span class="hljs-string">&#x27;loginStatus&#x27;</span>] <span class="hljs-comment">// reducer 里持久化的数据,除此外均为不持久化数据</span>
&#125;

<span class="hljs-keyword">const</span> persistedReducer = persistReducer(persistConfig, reducer)
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;  
  <span class="hljs-keyword">let</span> store = createStore(persistedReducer, applyMiddleware(thunk));  
  <span class="hljs-keyword">let</span> persistor = persistStore(store);  
  <span class="hljs-keyword">return</span> &#123; store, persistor &#125;;
&#125;;</code></pre>
<h2 id="3-入口文件index-js，将PersistGate标签作为父标签"><a href="#3-入口文件index-js，将PersistGate标签作为父标签" class="headerlink" title="3.入口文件index.js，将PersistGate标签作为父标签"></a>3.入口文件index.js，将PersistGate标签作为父标签</h2><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;
<span class="hljs-keyword">import</span> &#123; HashRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;
<span class="hljs-keyword">import</span> &#123; Provider &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;
<span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/index&quot;</span>;
<span class="hljs-keyword">import</span> &#123; PersistGate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-persist/integration/react&#x27;</span>
<span class="hljs-keyword">import</span> &#123; persistor &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/index&quot;</span>;
<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.js&quot;</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> serviceWorker <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./serviceWorker&quot;</span>;
ReactDOM.render(  
  &lt;HashRouter&gt;    
    &lt;Provider store=&#123;store&#125;&gt;      
      &lt;PersistGate loading=&#123;<span class="hljs-literal">null</span>&#125; persistor=&#123;persistor&#125;&gt;        
         &lt;App /&gt;      
    &lt;/PersistGate&gt;    
    &lt;/Provider&gt;  
  &lt;/HashRouter&gt;,  
  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>)
);
serviceWorker.unregister();</code></pre>
<p>这就完成了通过redux-persist实现redux持久化本地数据存储。<br><img src="/2020/10/21/redux%E6%8C%81%E4%B9%85%E5%8C%96%E6%8F%92%E4%BB%B6-%E8%A7%A3%E5%86%B3redux%E6%95%B0%E6%8D%AE%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/demo.png">  </p>
]]></content>
      <categories>
        <category>redux</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>redux</tag>
      </tags>
  </entry>
  <entry>
    <title>utils-工具函数封装</title>
    <url>/2020/08/17/utils-%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>在实际开发中，经常会遇到导出Excel之类的需求，一般都是后台直接给个接口，前端进行参数的拼接，点击拼接好的url打开新的窗口进行下载。但是，有时候会遇到有很多的参数，这样一来拼接起来可能密密麻麻，所以可以使用函数进行转换，传入对应的参数，这样写的人也不头疼，看的人也舒服。show code！</p>
<a id="more"></a>

<h1 id="建一个工具js，例如：utils-js"><a href="#建一个工具js，例如：utils-js" class="headerlink" title="建一个工具js，例如：utils.js"></a>建一个工具js，例如：utils.js</h1><pre><code class="hljs qml"><span class="hljs-keyword">var</span> getParam = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;    
  <span class="hljs-keyword">let</span> <span class="hljs-built_in">url</span> = <span class="hljs-string">&#x27;&#x27;</span>;    
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> data) &#123;        
    <span class="hljs-keyword">let</span> value = data[k] !== <span class="hljs-literal">undefined</span> ? data[k] : <span class="hljs-string">&#x27;&#x27;</span>;        
    <span class="hljs-built_in">url</span> += <span class="hljs-string">`&amp;<span class="hljs-subst">$&#123;k&#125;</span>=<span class="hljs-subst">$&#123;encodeURIComponent(value)&#125;</span>`</span>    
  &#125;    
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">url</span> ? <span class="hljs-built_in">url</span>.substring(<span class="hljs-number">1</span>) : <span class="hljs-string">&#x27;&#x27;</span>
&#125;
<span class="hljs-comment">//最终获取带参数的url方法</span>
<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getExportUrl</span>(<span class="hljs-params">url, data</span>) </span>&#123;    
  <span class="hljs-comment">//看原始url地址中开头是否带?，然后拼接处理好的参数    </span>
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">url</span> += (<span class="hljs-built_in">url</span>.indexOf(<span class="hljs-string">&#x27;?&#x27;</span>) &lt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;?&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>) + getParam(data)
&#125;</code></pre>
<h1 id="在需要的页面进行引用"><a href="#在需要的页面进行引用" class="headerlink" title="在需要的页面进行引用"></a>在需要的页面进行引用</h1><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getExportUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils&#x27;</span>;
<span class="hljs-function"><span class="hljs-title">exportExecl</span>(<span class="hljs-params"></span>)</span> &#123;  
  <span class="hljs-keyword">const</span> params = &#123;     
    account: <span class="hljs-built_in">this</span>.account,
    type: <span class="hljs-built_in">this</span>.type,
    ...(需要传入的参数)  
  &#125;;  
  <span class="hljs-keyword">const</span> baseURL = process.env.VUE_APP_BASE_API + <span class="hljs-string">&quot;/export/&quot;</span>;    <span class="hljs-comment">// 下载地址  </span>
  <span class="hljs-built_in">window</span>.open(getExportUrl(baseURL, params));   <span class="hljs-comment">// 传入下载的接口地址和需要拼接的参数</span>
&#125;</code></pre>]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中使用qs插件</title>
    <url>/2020/09/07/vue%E4%B8%AD%E4%BD%BF%E7%94%A8qs%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>之前用Vue+element写了一个后台管理系统，在使用axios请求数据传参时无法正常的获取数据，百度了一些资料，发现原因是传递参数要将参数序列化。于是使用了qs插件，简单来说，qs 是一个增加了一些安全性的查询字符串解析和序列化字符串的库。</p>
<a id="more"></a>

<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> qs</code></pre>
<h2 id="在main-js中引入qs，并配置全局"><a href="#在main-js中引入qs，并配置全局" class="headerlink" title="在main.js中引入qs，并配置全局"></a>在main.js中引入qs，并配置全局</h2><pre><code class="hljs elm"><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">as</span> &quot;qs&quot;

配全局属性配置，在任意组件内可以使用this.$qs获取qs对象 
<span class="hljs-type">Vue</span>.proto<span class="hljs-keyword">type</span>.$qs = qs</code></pre>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code class="hljs qml">将对象序列化，多个对象之间用&amp;拼接
<span class="hljs-keyword">let</span> params = qs.stringify(&#123;
    <span class="hljs-attribute">id:</span><span class="hljs-string"> 1, </span>
<span class="hljs-string">    value</span>: <span class="hljs-string">&quot;手机&quot;</span>
&#125;)

* qs.parse()和qs.stringify()相反，是将序列化的内容解析成对象的形式,</code></pre>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue文件上传, 引用ali-oss</title>
    <url>/2020/08/18/vue%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%BC%95%E7%94%A8ali-oss/</url>
    <content><![CDATA[<p>在之前的开发当中都是后台处理上传，前端负责上传接口调用，一直也没涉及和处理到直传到阿里云对象存储服务（oss），网上查阅了一些相关的资料，将个人开发中所遇到的问题和心得，一起分享。</p>
<a id="more"></a>

<h1 id="使用oss"><a href="#使用oss" class="headerlink" title="使用oss"></a>使用oss</h1><h2 id="1-使用-NPM-安装ali-oss"><a href="#1-使用-NPM-安装ali-oss" class="headerlink" title="1.使用 NPM 安装ali-oss"></a>1.使用 NPM 安装ali-oss</h2><pre><code>npm install ali-oss</code></pre>
<h2 id="2-写一个公用的ali-oss-js"><a href="#2-写一个公用的ali-oss-js" class="headerlink" title="2.写一个公用的ali-oss.js"></a>2.写一个公用的ali-oss.js</h2><pre><code class="hljs lasso"><span class="hljs-comment">// 引入ali-oss</span>
<span class="hljs-keyword">let</span> OSS = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;ali-oss&#x27;</span>)

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> *  [accessKeyId] &#123;String&#125;：通过阿里云控制台创建的AccessKey。</span>
<span class="hljs-comment"> *  [accessKeySecret] &#123;String&#125;：通过阿里云控制台创建的AccessSecret。</span>
<span class="hljs-comment"> *  [bucket] &#123;String&#125;：通过控制台或PutBucket创建的bucket。</span>
<span class="hljs-comment"> *  [region] &#123;String&#125;：bucket所在的区域， 默认oss-cn-hangzhou。</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">let</span> client = <span class="hljs-literal">new</span> OSS(&#123;
  region: <span class="hljs-string">&#x27;&lt;oss region&gt;&#x27;</span>,
  secure: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// secure: 配合region使用，如果指定了secure为true，则使用HTTPS访问  </span>
  accessKeyId: <span class="hljs-string">&#x27;&lt;Your accessKeyId&gt;&#x27;</span>,
  accessKeySecret: <span class="hljs-string">&#x27;&lt;Your accessKeySecret&gt;&#x27;</span>,
  bucket: <span class="hljs-string">&#x27;&lt;Your bucket name&gt;&#x27;</span>
&#125;)</code></pre>
<h2 id="3-调用api"><a href="#3-调用api" class="headerlink" title="3.调用api"></a>3.调用api</h2><pre><code class="hljs javascript"><span class="hljs-comment">/** </span>
<span class="hljs-comment">*  上传文件，大小不能超过5GB </span>
<span class="hljs-comment">* <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> </span>ObjName OSS的储存路径和文件名字 </span>
<span class="hljs-comment">* <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> </span>fileUrl 本地文件 </span>
<span class="hljs-comment">* <span class="hljs-doctag">@retruns </span>Promise </span>
<span class="hljs-comment">*/</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> put = <span class="hljs-keyword">async</span> (ObjName, fileUrl) =&gt; &#123;  
  <span class="hljs-keyword">try</span> &#123;    
    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> client.put(<span class="hljs-string">`<span class="hljs-subst">$&#123;ObjName&#125;</span>`</span>, fileUrl)    
    <span class="hljs-comment">// ObjName为文件名字,可以只写名字，就直接储存在 bucket 的根路径，如需放在文件夹下面直接在文件名前面加上文件夹名称    </span>
    <span class="hljs-keyword">return</span> result  
  &#125; <span class="hljs-keyword">catch</span> (e) &#123;    
   <span class="hljs-built_in">console</span>.log(e)  
  &#125;
&#125;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> signatureUrl= <span class="hljs-keyword">async</span> (ObjName) =&gt; &#123;    <span class="hljs-keyword">try</span> &#123;    
    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> client.signatureUrl(<span class="hljs-string">`<span class="hljs-subst">$&#123;ObjName&#125;</span>`</span>)    
    <span class="hljs-keyword">return</span> result  
  &#125; <span class="hljs-keyword">catch</span> (e) &#123;    
    <span class="hljs-built_in">console</span>.log(e)  
  &#125;
&#125;

<span class="hljs-comment">// 上传成功之后，转换真实的地址</span>
<span class="hljs-comment">// 后台只需要传入文件名，回显时候同样也只是返回文件名，说做数据迁移管理时候不麻烦，反正意思就是上传出现问题都和他们无关，so，没办法，所以需要自己根据返回文件名进行转码，生成所需要的url</span></code></pre>
<h2 id="4-保证上传文件的唯一性，网上找的算法（可以根据具体需求来），随机生成文件名"><a href="#4-保证上传文件的唯一性，网上找的算法（可以根据具体需求来），随机生成文件名" class="headerlink" title="4.保证上传文件的唯一性，网上找的算法（可以根据具体需求来），随机生成文件名"></a>4.保证上传文件的唯一性，网上找的算法（可以根据具体需求来），随机生成文件名</h2><pre><code class="hljs javascript"><span class="hljs-comment">/** </span>
<span class="hljs-comment">* 生成随机文件名称 </span>
<span class="hljs-comment">* 规则八位随机字符，加下划线连接时间戳 </span>
<span class="hljs-comment">*/</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getFileNameUUID = <span class="hljs-function">() =&gt;</span> &#123;  
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rx</span>(<span class="hljs-params"></span>) </span>&#123;    
    <span class="hljs-keyword">return</span> (((<span class="hljs-number">1</span> + <span class="hljs-built_in">Math</span>.random()) * <span class="hljs-number">0x10000</span>) | <span class="hljs-number">0</span>).toString(<span class="hljs-number">16</span>).substring(<span class="hljs-number">1</span>)  
  &#125;  
  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()&#125;</span>_<span class="hljs-subst">$&#123;rx()&#125;</span><span class="hljs-subst">$&#123;rx()&#125;</span>`</span>
&#125;</code></pre>
<h1 id="使用element的-upload-组件进行上传"><a href="#使用element的-upload-组件进行上传" class="headerlink" title="使用element的 upload 组件进行上传"></a>使用element的 upload 组件进行上传</h1><p>  Element-UI的 Upload 组件有一个 http-request 配置，可以自定义上传方法，覆盖默认的。直接贴代码</p>
<pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span>
<span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span>
<span class="xml">    &lt;el-upload</span>
<span class="xml">      class=&quot;upload-demo&quot;</span>
<span class="xml">      action</span>
<span class="xml">      :http-request=&quot;handleUpload&quot;</span>
<span class="xml">      :on-preview=&quot;handlePreview&quot;</span>
<span class="xml">      :on-remove=&quot;handleRemove&quot;</span>
<span class="xml">      :on-success=&quot;handleSuccess&quot;</span>
<span class="xml">      :before-remove=&quot;beforeRemove&quot;</span>
<span class="xml">      :before-upload=&quot;beforeUpload&quot;</span>
<span class="xml">      multiple      </span>
<span class="xml">      :limit=&quot;limit&quot;</span>
<span class="xml">      :on-exceed=&quot;handleExceed&quot;</span>
<span class="xml">      :file-list=&quot;fileList&quot;</span>
<span class="xml">      :list-type=&quot;listType&quot;</span>
<span class="xml">    &gt;</span>
<span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;small&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>点击上传<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span>
<span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;tip&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-upload__tip&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">tip</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
<span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span></span>
<span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span>

<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span>
<span class="xml">import &#123; put, signatureUrl, getFileNameUUID &#125; from &#x27;@/utils/ali-oss&#x27;</span>

<span class="xml">export default &#123;</span>
<span class="xml">  name: &#x27;Upload&#x27;,</span>
<span class="xml">  props: &#123;</span>
<span class="xml">    tip: &#123;</span>
<span class="xml">      type: String,</span>
<span class="xml">      default: &#x27;上传大小不能超过80M&#x27;</span>
<span class="xml">    &#125;,</span>
<span class="xml">    limit: &#123;</span>
<span class="xml">      type: Number,</span>
<span class="xml">      default: 1</span>
<span class="xml">    &#125;,</span>
<span class="xml">    action: &#123;</span>
<span class="xml">      type: String,</span>
<span class="xml">      default: &#x27;&#x27;</span>
<span class="xml">    &#125;,</span>
<span class="xml">    headers: &#123;</span>
<span class="xml">      type: Object,</span>
<span class="xml">      default: () =&gt; &#123;&#125;</span>
<span class="xml">    &#125;,</span>
<span class="xml">    name: &#123;</span>
<span class="xml">      type: String,</span>
<span class="xml">      default: &#x27;&#x27;</span>
<span class="xml">    &#125;,</span>
<span class="xml">    listType: &#123;</span>
<span class="xml">      type: String,</span>
<span class="xml">      default: &#x27;text&#x27;</span>
<span class="xml">    &#125;</span>
<span class="xml">  &#125;,</span>
<span class="xml">  data() &#123;</span>
<span class="xml">    return &#123;</span>
<span class="xml">      fileList: []</span>
<span class="xml">    &#125;</span>
<span class="xml">  &#125;,</span>
<span class="xml">  methods: &#123;</span>
<span class="xml">    handleRemove(file, fileList) &#123;</span>
<span class="xml">      this.$emit(&#x27;on-remove&#x27;, file, fileList)</span>
<span class="xml">    &#125;,</span>
<span class="xml">    handlePreview(file) &#123;</span>
<span class="xml">      this.$emit(&#x27;on-preview&#x27;, file)</span>
<span class="xml">    &#125;,</span>
<span class="xml">    handleExceed(files, fileList) &#123;</span>
<span class="xml">      this.$message.warning(`每次只能上传 $&#123;this.limit&#125; 个文件`)</span>
<span class="xml">    &#125;,</span>
<span class="xml">    beforeRemove(file, fileList) &#123;</span>
<span class="xml">      return this.$confirm(`确定移除 $&#123;file.name&#125;？`)</span>
<span class="xml">    &#125;,</span>
<span class="xml">    handleSuccess(response, file, fileList) &#123;</span>
<span class="xml">      this.fileList = fileList</span>
<span class="xml">      this.$emit(&#x27;on-success&#x27;, file, fileList)</span>
<span class="xml">    &#125;,</span>
<span class="xml">    beforeUpload(file) &#123;      </span>
<span class="xml">      // 限制上传类型      </span>
<span class="xml">      const fileExtensions = getFileName(file.name) === &#x27;.doc&#x27; || getFileName(file.name) === &#x27;.docx&#x27; || getFileName(file.name) ===&#x27;.pdf&#x27;      </span>
<span class="xml">      //限制的上限为20M      </span>
<span class="xml">      const max20M = file.size / 1024 / 1024 &lt; 20;      </span>
<span class="xml">      if (!fileExtensions) &#123;        </span>
<span class="xml">        this.$message.error(&#x27;上传文件类型只能是 .doc, .docx, .pdf 格式!&#x27;);      </span>
<span class="xml">      &#125;      </span>
<span class="xml">      if (!max20M) &#123;        </span>
<span class="xml">        this.$message.error(&#x27;上传文件大小不能超过 20MB!&#x27;);      </span>
<span class="xml">      &#125;      </span>
<span class="xml">      return fileExtensions &amp;&amp; max20M;    </span>
<span class="xml">    &#125;,</span>
<span class="xml">    /**</span>
<span class="xml">     * 自定义上传方法</span>
<span class="xml">     */</span>
<span class="xml">    handleUpload(option) &#123;</span>
<span class="xml">      // 获取文件的后缀名</span>
<span class="xml">      let objName = getFileNameUUID()</span>
<span class="xml">      var obj = option.file.name</span>
<span class="xml">      var index = obj.lastIndexOf(&quot;.&quot;);      </span>
<span class="xml">      obj = obj.substring(index,obj.length);</span>
<span class="xml">      // 生成的文件名，保留文件后缀名，进行拼接      </span>
<span class="xml">      let objName = getFileNameUUID() + getFileName(option.file.name)</span>

<span class="xml">      // 调用 ali-oss 中的方法,flieName是存放的文件夹名称，可自己定义</span>
<span class="xml">      put(`flieName/$&#123;objName&#125;`, option.file).then(res =&gt; &#123;        </span>
<span class="xml">        console.log(res)</span>
<span class="xml">        // 上传成功之后，转换真实的地址</span>
<span class="xml">        signatureUrl(`flieName/$&#123;objName&#125;`).then(res =&gt; &#123;          console.log(res)        &#125;)</span>
<span class="xml">      &#125;)</span>
<span class="xml">    &#125;</span>
<span class="xml">  &#125;</span>
<span class="xml">&#125;</span>
<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre>
<h1 id="最后，提交到后台保存文件地址"><a href="#最后，提交到后台保存文件地址" class="headerlink" title="最后，提交到后台保存文件地址"></a>最后，提交到后台保存文件地址</h1><p>  上传到阿里云OSS成功后，会返回文件的地址，提交给后台保存地址就可以了。</p>
<p><img src="/2020/08/18/vue%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%BC%95%E7%94%A8ali-oss/upload.jpg"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Element-UI 侧边栏页面刷新后不高亮显示的问题</title>
    <url>/2020/09/07/%E8%A7%A3%E5%86%B3Element-UI-%E4%BE%A7%E8%BE%B9%E6%A0%8F%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E5%90%8E%E4%B8%8D%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近在写一个后台管理系统，用的vue+element，侧边栏导航的时候路由跳转没有问题，但是页面刷新发现侧边栏的选中状态(高亮显示)没有了，其实问题很简单。</p>
<a id="more"></a>

<h2 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> </span>
<span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-menu-vertical-demo&quot;</span> </span>
<span class="hljs-tag">        <span class="hljs-attr">:default-active</span>=<span class="hljs-string">&quot;$route.path&quot;</span> </span>
<span class="hljs-tag">        <span class="hljs-attr">router</span></span>
<span class="hljs-tag">     &gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-order&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;/Goods/GoodsManagement&quot;</span>&gt;</span>        
        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-goods&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>商品管理<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre>
<p>启用router模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转，所以将el-menu-item的index设置成了path路由，default-active则是当前激活菜单的index，将default-active绑定为$route.path，这样即使刷新也不会失去高亮显示。</p>
]]></content>
      <categories>
        <category>Element</category>
      </categories>
      <tags>
        <tag>Element-UI</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app开发音乐小程序</title>
    <url>/2021/01/20/uni-app%E5%BC%80%E5%8F%91%E9%9F%B3%E4%B9%90%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>基于uni-app开发的一款关于音乐的移动端项目/小程序</p>
<a id="more"></a>

<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>一直有在了解小程序，然后通过uni-app一套代码多端，根据相关资料仿写了音乐小程序，学习学习 (^o^)/~<br>扫码访问</p>
<p><img src="https://github.com/Xxcool/music/blob/main/static/images/music.png"></p>
<h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><p>vue vuex uni-app</p>
<h4 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h4><p>网易云音乐公共接口<br><a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/">https://binaryify.github.io/NeteaseCloudMusicApi/#/</a></p>
<h4 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h4><p>git clone 本项目 然后拖动到Hbuild X中 运行查看 移动端/微信小程序(需要将manifest.json中的微信小程序配置中的Appid修改为自己的)</p>
<h4 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h4><ol>
<li>音乐bannel轮播</li>
<li>推荐歌单 swiper形式呈现</li>
<li>推荐Mv列表 swiper形式呈现</li>
<li>歌手榜 swiper形式呈现</li>
<li>歌手描述 歌手单曲 歌手mv</li>
<li>精彩节目推荐</li>
<li>各大地区榜单排行 榜单详情</li>
<li>mv详情 mv分类(最新mv mv排行 推荐mv) 类似mv查看</li>
<li>歌曲播放 歌曲评论 热门评论</li>
<li>搜索歌曲 热门搜索 搜索记录</li>
</ol>
]]></content>
      <categories>
        <category>uni-app, 小程序</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
